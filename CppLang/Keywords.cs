// Copyright (C) 2017 Schroedinger Entertainment
// Distributed under the Schroedinger Entertainment EULA (See EULA.md for details)

using System;
using System.Collections.Generic;

namespace SE.CppLang
{
    /// <summary>
    /// https://en.cppreference.com/w/cpp/keyword
    /// </summary>
    public enum Keywords
    {
        Alignas = CppToken.Alignas,
        Alignof = CppToken.Alignof,
        Asm = CppToken.Asm,
        Atomic_cancel = CppToken.Atomic_cancel,
        Atomic_commit = CppToken.Atomic_commit,
        Atomic_noexcept = CppToken.Atomic_noexcept,
        Auto = CppToken.Auto,
        Bool = CppToken.Bool,
        Break = CppToken.Break,
        Case = CppToken.Case,
        Catch = CppToken.Catch,
        Char = CppToken.Char,
        Char8_t = CppToken.Char8_t,
        Char16_t = CppToken.Char16_t,
        Char32_t = CppToken.Char32_t,
        Class = CppToken.Class,
        Concept = CppToken.Concept,
        Const = CppToken.Const,
        Consteval = CppToken.Consteval,
        Constexpr = CppToken.Constexpr,
        Constinit = CppToken.Constinit,
        Const_cast = CppToken.Const_cast,
        Continue = CppToken.Continue,
        Co_await = CppToken.Co_await,
        Co_return = CppToken.Co_return,
        Co_yield = CppToken.Co_yield,
        Decltype = CppToken.Decltype,
        Default = CppToken.Default,
        Delete = CppToken.Delete,
        Do = CppToken.Do,
        Double = CppToken.Double,
        Dynamic_cast = CppToken.Dynamic_cast,
        Else = CppToken.Else,
        Enum = CppToken.Enum,
        Explicit = CppToken.Explicit,
        Export = CppToken.Export,
        Extern = CppToken.Extern,
        False = CppToken.False,
        Float = CppToken.Float,
        For = CppToken.For,
        Friend = CppToken.Friend,
        Goto = CppToken.Goto,
        If = CppToken.If,
        Inline = CppToken.Inline,
        Int = CppToken.Int,
        Long = CppToken.Long,
        Mutable = CppToken.Mutable,
        Namespace = CppToken.Namespace,
        New = CppToken.New,
        Noexcept = CppToken.Noexcept,
        Nullptr = CppToken.Nullptr,
        Operator = CppToken.Operator,
        Private = CppToken.Private,
        Protected = CppToken.Protected,
        Public = CppToken.Public,
        Reflexpr = CppToken.Reflexpr,
        Register = CppToken.Register,
        Reinterpret_cast = CppToken.Reinterpret_cast,
        Requires = CppToken.Requires,
        Return = CppToken.Return,
        Short = CppToken.Short,
        Signed = CppToken.Signed,
        Sizeof = CppToken.Sizeof,
        Static = CppToken.Static,
        Static_assert = CppToken.Static_assert,
        Static_cast = CppToken.Static_cast,
        Struct = CppToken.Struct,
        Switch = CppToken.Switch,
        Synchronized = CppToken.Synchronized,
        Template = CppToken.Template,
        This = CppToken.This,
        Thread_local = CppToken.Thread_local,
        Throw = CppToken.Throw,
        True = CppToken.True,
        Try = CppToken.Try,
        Typedef = CppToken.Typedef,
        Typeid = CppToken.Typeid,
        Typename = CppToken.Typename,
        Union = CppToken.Union,
        Unsigned = CppToken.Unsigned,
        Using = CppToken.Using,
        Virtual = CppToken.Virtual,
        Void = CppToken.Void,
        Volatile = CppToken.Volatile,
        Wchar_t = CppToken.Wchar_t,
        While = CppToken.While
    }
}
