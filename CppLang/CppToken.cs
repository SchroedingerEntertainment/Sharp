// Copyright (C) 2017 Schroedinger Entertainment
// Distributed under the Schroedinger Entertainment EULA (See EULA.md for details)

using System;
using System.Collections.Generic;

namespace SE.CppLang
{
    public enum CppToken
    {
        Invalid = 0,

        #region Generic
        Identifier = Token.Identifier,

        StringLiteral = Token.StringLiteral,
        BogusStringLiteral = Token.BogusStringLiteral,

        CharacterLiteral = Token.CharacterLiteral,
        BogusCharacterLiteral = Token.BogusCharacterLiteral,

        Numeric = Token.Numeric,
        Character = Token.Character,

        New = Token.New,
        Delete = Token.Delete,

        LeftCurlyBracket = Token.LeftCurlyBracket,
        CurlyBracketOpen = LeftCurlyBracket,
        RightCurlyBracket = Token.RightCurlyBracket,
        CurlyBracketClose = RightCurlyBracket,

        LeftRoundBracket = Token.LeftRoundBracket,
        RoundBracketOpen = LeftRoundBracket,
        RightRoundBracket = Token.RightRoundBracket,
        RoundBracketClose = RightRoundBracket,

        LeftSquareBracket = Token.LeftSquareBracket,
        SquareBracketOpen = LeftSquareBracket,
        RightSquareBracket = Token.RightSquareBracket,
        SquareBracketClose = RightSquareBracket,

        LeftAngleBracket = LessThan,
        AngleBracketOpen = LessThan,
        RightAngleBracket = GreaterThan,
        AngleBracketClose = GreaterThan,

        ScopeResolution = Token.ScopeResolution,
        PointerToMember = Token.PointerToMember,
        Pointer = Token.Pointer,
        ReferenceToMember = Token.ReferenceToMember,
        VariableArgs = Token.VariableArgs,
        ThreeWayComparsion = Token.ThreeWayComparsion,
        LogicalAnd = Token.LogicalAnd,
        LogicalOr = Token.LogicalOr,
        LessThan = Token.LessThan,
        LessEqual = Token.LessEqual,
        GreaterEqual = Token.GreaterEqual,
        GreaterThan = Token.GreaterThan,
        LogicalNot = Token.LogicalNot,
        NotEqual = Token.NotEqual,
        Equal = Token.Equal,
        BitwiseAnd = Token.BitwiseAnd,
        BitwiseAndAssign = Token.BitwiseAndAssign,
        BitwiseXor = Token.BitwiseXor,
        BitwiseXorAssign = Token.BitwiseXorAssign,
        BitwiseOr = Token.BitwiseOr,
        BitwiseOrAssign = Token.BitwiseOrAssign,
        BitwiseNot = Token.BitwiseNot,
        RightShift = Token.RightShift,
        RightShiftAssign = Token.RightShiftAssign,
        LeftShift = Token.LeftShift,
        LeftShiftAssign = Token.LeftShiftAssign,
        Mod = Token.Mod,
        ModAssign = Token.ModAssign,
        Mult = Token.Mult,
        MultAssign = Token.MultAssign,
        Div = Token.Div,
        DivAssign = Token.DivAssign,
        Decrement = Token.Decrement,
        Sub = Token.Sub,
        SubAssign = Token.SubAssign,
        Increment = Token.Increment,
        Add = Token.Add,
        AddAssign = Token.AddAssign,
        Assign = Token.Assign,
        Ternary = Token.Ternary,
        Semicolon = Token.Semicolon,
        Colon = Token.Colon,
        Dot = Token.Dot,
        Comma = Token.Comma,
        Whitespace = Token.Whitespace,
        #endregion

        #region Keywords
        KeywordsLowerEnd = Token.Custom,

        Alignas = KeywordsLowerEnd,
        Alignof,
        Asm,
        Atomic_cancel,
        Atomic_commit,
        Atomic_noexcept,
        Auto,
        Bool,
        Break,
        Case,
        Catch,
        Char,
        Char8_t,
        Char16_t,
        Char32_t,
        Class,
        Concept,
        Const,
        Consteval,
        Constexpr,
        Constinit,
        Const_cast,
        Continue,
        Co_await,
        Co_return,
        Co_yield,
        Decltype,
        Default,
        Do,
        Double,
        Dynamic_cast,
        Else,
        Enum,
        Explicit,
        Export,
        Extern,
        False,
        Float,
        For,
        Friend,
        Goto,
        If,
        Inline,
        Int,
        Long,
        Mutable,
        Namespace,
        Noexcept,
        Nullptr,
        Operator,
        Private,
        Protected,
        Public,
        Reflexpr,
        Register,
        Reinterpret_cast,
        Requires,
        Return,
        Short,
        Signed,
        Sizeof,
        Static,
        Static_assert,
        Static_cast,
        Struct,
        Switch,
        Synchronized,
        Template,
        This,
        Thread_local,
        Throw,
        True,
        Try,
        Typedef,
        Typeid,
        Typename,
        Union,
        Unsigned,
        Using,
        Virtual,
        Void,
        Volatile,
        Wchar_t,
        While,

        KeywordsUpperEnd = While,
        #endregion
    }
}
