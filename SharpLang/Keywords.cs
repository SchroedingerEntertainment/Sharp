// Copyright (C) 2017 Schroedinger Entertainment
// Distributed under the Schroedinger Entertainment EULA (See EULA.md for details)

using System;
using System.Collections.Generic;

namespace SE.SharpLang
{
    /// <summary>
    /// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
    /// </summary>
    public enum Keywords
    {
        Abstract = SharpToken.Abstract,
        As = SharpToken.As,
        Base = SharpToken.Base,
        Bool = SharpToken.Bool,
        Break = SharpToken.Break,
        Byte = SharpToken.Byte,
        Case = SharpToken.Case,
        Catch = SharpToken.Catch,
        Char = SharpToken.Char,
        Checked = SharpToken.Checked,
        Class = SharpToken.Class,
        Const = SharpToken.Const,
        Continue = SharpToken.Continue,
        Decimal = SharpToken.Decimal,
        Default = SharpToken.Default,
        Delegate = SharpToken.Delegate,
        Do = SharpToken.Do,
        Double = SharpToken.Double,
        Else = SharpToken.Else,
        Enum = SharpToken.Enum,
        Event = SharpToken.Event,
        Explicit = SharpToken.Explicit,
        Extern = SharpToken.Extern,
        False = SharpToken.False,
        Finally = SharpToken.Finally,
        Fixed = SharpToken.Fixed,
        Float = SharpToken.Float,
        For = SharpToken.For,
        Foreach = SharpToken.Foreach,
        Goto = SharpToken.Goto,
        If = SharpToken.If,
        Implicit = SharpToken.Implicit,
        In = SharpToken.In,
        Int = SharpToken.Int,
        Interface = SharpToken.Interface,
        Internal = SharpToken.Internal,
        Is = SharpToken.Is,
        Lock = SharpToken.Lock,
        Long = SharpToken.Long,
        Namespace = SharpToken.Namespace,
        New = SharpToken.New,
        Null = SharpToken.Null,
        Object = SharpToken.Object,
        Operator = SharpToken.Operator,
        Out = SharpToken.Out,
        Override = SharpToken.Override,
        Params = SharpToken.Params,
        Private = SharpToken.Private,
        Protected = SharpToken.Protected,
        Public = SharpToken.Public,
        Readonly = SharpToken.Readonly,
        Ref = SharpToken.Ref,
        Return = SharpToken.Return,
        Sbyte = SharpToken.Sbyte,
        Sealed = SharpToken.Sealed,
        Short = SharpToken.Short,
        Sizeof = SharpToken.Sizeof,
        Stackalloc = SharpToken.Stackalloc,
        Static = SharpToken.Static,
        String = SharpToken.String,
        Struct = SharpToken.Struct,
        Switch = SharpToken.Switch,
        This = SharpToken.This,
        Throw = SharpToken.Throw,
        True = SharpToken.True,
        Try = SharpToken.Try,
        Typeof = SharpToken.Typeof,
        Uint = SharpToken.Uint,
        Ulong = SharpToken.Ulong,
        Unchecked = SharpToken.Unchecked,
        Unsafe = SharpToken.Unsafe,
        Ushort = SharpToken.Ushort,
        Using = SharpToken.Using,
        Virtual = SharpToken.Virtual,
        Void = SharpToken.Void,
        Volatile = SharpToken.Volatile,
        While = SharpToken.While,
    }
}
